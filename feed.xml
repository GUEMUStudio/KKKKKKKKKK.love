<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="KKKKKKKKKK.love/feed.xml" rel="self" type="application/atom+xml" /><link href="KKKKKKKKKK.love/" rel="alternate" type="text/html" /><updated>2023-09-30T09:23:49+00:00</updated><id>KKKKKKKKKK.love/feed.xml</id><title type="html">KKKKKKKKKK.love</title><entry><title type="html">从零开始构建静态网站</title><link href="KKKKKKKKKK.love/1990" rel="alternate" type="text/html" title="从零开始构建静态网站" /><published>2023-09-26T00:00:00+00:00</published><updated>2023-09-26T00:00:00+00:00</updated><id>KKKKKKKKKK.love/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%9E%84%E5%BB%BA%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5</id><content type="html" xml:base="KKKKKKKKKK.love/1990"><![CDATA[<p>我计划写的全面一些，让这个文档能帮助小白从零开始构建一个自己的网页，它可以是你的博客、产品展示、企业官网等，如果基础内容写完还有功夫的话，我会把一些进阶的办法放进来，无论如何，只要你有兴趣随着文档一步步来，它能帮助你很好的理解网页前端的开发、设计、部署，是不错的入门途径。总之，Flag先立，然后慢慢写吧</p>

<p>对了，如果你没有开发基础，这个过程会需要投入一定的学习时间，以及如果你想要自定义域名，例如“kkkkkkkkkk.love”的话，这是要付费的，一般情况下大概爱奇艺一个月的会员费够用一年<em>（抱歉，我与爱奇艺不待见，虽然每个月会员费都交，我妈要看）</em></p>

<hr />

<p><span style="font-size: 24px; font-weight: bold;">目录</span></p>

<ul>
  <li><a href="#1-基础概念">1 基础概念</a>
    <ul>
      <li><a href="#11-轻量化创建网站的流程">1.1 轻量化创建网站的流程</a></li>
      <li><a href="#12-关键词解释">1.2 关键词解释</a></li>
      <li><a href="#13-jekyll和普通静态网页的区别">1.3 Jekyll和普通静态网页的区别</a></li>
      <li><a href="#14-jekyll之外的其它选择">1.4 Jekyll之外的其它选择</a></li>
      <li><a href="#15-无后端的优势">1.5 无后端的优势</a></li>
      <li><a href="#16-什么是后端">1.6 什么是后端</a></li>
    </ul>
  </li>
</ul>

<h2 id="1-基础概念">1 基础概念</h2>
<h3 id="11-轻量化创建网站的流程">1.1 轻量化创建网站的流程</h3>
<p><em>以下仅简述逻辑</em></p>

<ol>
  <li><strong>开发与配置：</strong>用户在本地计算机上使用Jekyll创建自己的静态网站，开发或选择一个适合的Jekyll主题，编写内容和测试网站</li>
  <li><strong>托管在GitHub：</strong>用户将他们的Jekyll网站源代码上传到GitHub仓库中。GitHub允许用户创建一个特殊的仓库，例如”username.github.io”，这将成为他们的GitHub Pages网站</li>
  <li><strong>设置GitHub Pages：</strong>在GitHub仓库的设置中，用户可以启用GitHub Pages服务，并选择使用main分支或其他分支作为网站的源</li>
  <li><strong>绑定域名：</strong>用户购买一个域名（例如，www.example.com）并在域名注册商的控制面板中配置DNS设置，将域名指向GitHub Pages的服务器</li>
  <li><strong>等待DNS传播：</strong>域名指向GitHub Pages后，需要等待一段时间（通常几小时到48小时）以便DNS设置在全球范围内传播。一旦传播完成，人们就可以通过域名访问网站</li>
  <li><strong>自动部署：</strong>GitHub Pages支持自动构建和部署，每当用户在GitHub仓库中进行更改时，它会自动重新构建并更新网站</li>
</ol>

<h3 id="12-关键词解释">1.2 关键词解释</h3>
<p><em>建立基本认知即可</em></p>

<ul>
  <li><strong>Jekyll：</strong>一个静态站点生成器，可以将Markdown、Liquid、HTML 和 CSS转换成静态网站。用户可以选择 Jekyll主题来定义网站的外观和布局。Jekyll和GitHub Pages配合得很好，用户可以轻松地在GitHub上托管他们的Jekyll网站，Jekyll相当于地基，我们要在上面建房子</li>
  <li><strong>主题：</strong>定义了网站的基础结构和样式。你可以选择已有的主题或开发自定义主题。主题通常包含布局、样式表、图片和其他资源，结构与常见的静态网页非常相似，原理大致可以理解为和QQ空间模板类似，可以选择模板，也可以完全自由开发</li>
  <li><strong>GitHub：</strong>一个网上的代码托管平台，支持 Git。GitHub Pages 是 GitHub 提供的一项服务，允许用户免费托管静态网站。用户可以创建一个特殊的仓库，将Jekyll网站的源代码上传到这个仓库，GitHub Pages 会自动将其构建成静态网站</li>
  <li><strong>域名：</strong>俗称的“网址”，例如”example.com”，用户可以购买域名，并将其指向他们在GitHub Pages上托管的 Jekyll网站，从而让访问者通过该域名访问他们的网站</li>
</ul>

<h3 id="13-jekyll和普通静态网页的区别">1.3 Jekyll和普通静态网页的区别</h3>

<p>普通的静态网页和Jekyll生成的静态网页在很多方面都具有相似的结构，例如HTML、CSS和JavaScript等，简而言之，虽然最终产出的都是静态网页，但Jekyll提供了一种更为高效、模块化且易于维护的方法来生成和管理静态网页内容。以下是它们之间的一些关键区别：</p>

<p><strong>相似点：</strong></p>
<ul>
  <li><strong>静态内容：</strong>无论是普通的静态网页还是Jekyll生成的网页，都是由静态内容组成的，包括HTML、CSS和JavaScript</li>
  <li><strong>客户端渲染：</strong>两者都是在用户的浏览器上渲染的，不涉及服务器端渲染</li>
</ul>

<p><strong>区别：</strong></p>
<ul>
  <li><strong>生成方式：</strong><br />
普通静态网页：通常由开发者直接编写HTML、CSS和JavaScript<br />
Jekyll：使用Markdown、Liquid模板语言和YAML数据来生成静态网页</li>
  <li><strong>动态内容与数据：</strong><br />
普通静态网页：通常包含硬编码的内容，不容易进行内容更新和数据管理<br />
Jekyll：可以利用<code class="language-plaintext highlighter-rouge">_data</code>文件夹和<code class="language-plaintext highlighter-rouge">_posts</code>文件夹来管理结构化数据和内容，使得内容更新和数据管理更为方便</li>
  <li><strong>模板与组件：</strong><br />
普通静态网页：重用代码块通常依赖于复制和粘贴，导致维护困难<br />
Jekyll：利用<code class="language-plaintext highlighter-rouge">_includes</code>和<code class="language-plaintext highlighter-rouge">_layouts</code>文件夹中的文件，可以轻松实现代码的模块化和组件化，便于维护</li>
  <li><strong>配置与构建</strong><br />
普通静态网页：通常没有全局的配置文件和自动化构建过程<br />
Jekyll：利用<code class="language-plaintext highlighter-rouge">_config.yml</code>进行全局配置，并通过Jekyll的构建过程自动化生成网页</li>
</ul>

<h3 id="14-jekyll之外的其它选择">1.4 Jekyll之外的其它选择</h3>
<p>类似Jekyll，有许多其他的静态网站生成器和前端工具，也能高效地构建网页，这些工具和框架都有各自的优势，选择哪个取决于项目需求、个人或团队的偏好、所需的功能和学习曲线。以下是一些流行的静态网站生成器和前端框架：</p>

<p><strong>静态网站生成器：</strong></p>

<ul>
  <li><strong>Hugo</strong><br />
Hugo是用Go语言编写的，是一款非常快速的静态网站生成器，与Jekyll类似，Hugo也使用Markdown来编写内容，但它没有依赖运行环境，安装简单</li>
  <li><strong>Gatsby</strong><br />
Gatsby是一个基于React的开源框架，用于构建静态网站和应用，它可以从多个源获取数据，包括Markdown、CMS系统、APIs等，并生成高性能的静态网站</li>
  <li><strong>Next.js</strong><br />
Next.js是一个基于React的轻量级框架，用于静态和服务端渲染应用
Next.js提供了很多功能，例如自动代码拆分、简单的客户端路由和内置的CSS支持</li>
  <li><strong>VuePress</strong><br />
VuePress是一个基于Vue的轻量级静态网站生成器，特别适合文档网站，它提供了基于Markdown的编写环境，并且每一个Markdown文件都是一个Vue组件</li>
  <li><strong>Nuxt.js</strong><br />
Nuxt.js是一个基于Vue.js的高级框架，用于创建静态和服务端渲染应用，它提供了代码分割、服务器渲染、热模块替换等功能</li>
  <li><strong>Hexo</strong><br />
Hexo是一个快速、简单且强大的博客框架，使用Node.js编写，支持Markdown，并且拥有丰富的插件系统和主题</li>
  <li><strong>Pelican</strong><br />
Pelican是用Python编写的静态网站生成器，支持Markdown和reStructuredText格式的内容，并且允许用户通过插件扩展功能</li>
</ul>

<p><strong>前端框架：</strong></p>

<ul>
  <li><strong>React</strong><br />
React是一个用于构建用户界面的JavaScript库，适合创建单页应用，使用组件化的开发模式，可以轻松创建复杂的用户界面</li>
  <li><strong>Vue.js</strong><br />
Vue.js是一个渐进式JavaScript框架，用于构建用户界面，适合用于从单文件组件到复杂的单页应用的各种场景</li>
  <li><strong>Angular</strong><br />
Angular是一个开源的前端框架，由Google维护，它适合构建动态单页应用，提供了大量工具和设计模式来解决开发中的各种问题</li>
  <li><strong>Svelte</strong><br />
Svelte是一个新颖的前端框架，它在构建阶段将组件转换为高效的JavaScript，不同于其他框架，因为它没有运行时框架</li>
</ul>

<h3 id="15-无后端的优势">1.5 无后端的优势</h3>

<p>Jekyll这类静态网站生成器允许开发者专注于内容创建，而无需管理服务器和数据库。这在很大程度上降低了开发和维护的复杂性，并能够显著提高网站的加载速度。这是因为，静态网站的内容是预先生成的，服务器只需将预先生成的文件发送到用户的浏览器，而无需动态生成页面内容或访问数据库</p>

<p>Jekyll和其他静态网站生成器是将网站开发变得更加轻量化和简单化的好工具，尤其适合内容导向的项目，它们省去了很多传统的后端工作，但也有其局限性。在选型时，要根据项目的实际需求和特点进行权衡</p>

<p><strong>总结：</strong></p>

<ul>
  <li><strong>性能：</strong>由于内容是静态的，加载速度通常会更快</li>
  <li><strong>安全性：</strong>缺少动态内容和数据库交互降低了安全风险</li>
  <li><strong>成本：</strong>静态网站通常更便宜且更容易维护，特别是对于小型网站和博客</li>
  <li><strong>托管：</strong>许多平台，例如GitHub Pages，提供免费的静态网站托管服务</li>
  <li><strong>版本控制：</strong> 可以使用Git等版本控制工具轻松管理网站内容</li>
</ul>

<p><strong>应用场景：</strong></p>

<p>静态网站生成器并不适合所有类型的网站。对于需要实时动态内容、用户交互、实时数据或者复杂服务器逻辑的应用，仍然需要完整的后端服务</p>

<ul>
  <li><strong>适合：</strong> 博客、文档网站、个人网站、小型企业网站、展示网站等</li>
  <li><strong>不适合：</strong> 社交媒体平台、电子商务网站、在线游戏、实时聊天应用等</li>
</ul>

<h3 id="16-什么是后端">1.6 什么是后端</h3>

<p>在Web开发中，通常会有前端和后端两个部分。前端主要处理用户界面和用户交互，而后端主要处理数据处理、业务逻辑和与数据库的交互。在现代Web开发中，前后端分离成为了一种常见的架构模式，使得开发更加模块化和可维护，也更容易适应变化和扩展。使用Jekyll这类前端生成工具，轻量化的应用免去了后端的开发和部署，所以这里仅为将来可能要学习的朋友做一些简单介绍<em>（做内容的时候常常会想：要是当年也能有人告诉我这些就好了，是啊，多难的路我们都能坚持，而如果没有地图，再轻松的工作也变得漫无目的，而后放弃）</em></p>

<p><strong>前后端关系</strong></p>

<ul>
  <li><strong>数据交互：</strong>
前端通过HTTP请求从后端获取数据，后端处理这些请求并将数据返回到前端，数据通常以JSON格式进行交换</li>
  <li><strong>用户界面与业务逻辑：</strong>
前端主要负责展示数据和用户交互，用户的操作如果需要更改数据，则通常会发送请求到后端，后端负责处理这些请求，执行相应的业务逻辑，可能会与数据库交互，然后将结果返回给前端</li>
  <li><strong>分工与协作：</strong>
前后端的分工使得开发团队可以并行工作，前端开发者可以专注于用户体验，而后端开发者可以专注于数据和业务逻辑。前后端需要紧密协作，确保数据的一致性和交互的流畅性</li>
  <li><strong>API：</strong>
为了实现前后端之间的交互，后端提供一组API（应用程序接口），前端可以通过这些API请求数据或发送数据。API定义了前端和后端如何通信，是连接前后端的桥梁</li>
</ul>

<p><strong>后端技术</strong></p>
<ul>
  <li><strong>服务器：</strong>服务器是托管网站或Web应用的计算机，它会响应和处理用户的请求</li>
  <li><strong>应用：</strong>这是运行在服务器上的软件，负责处理业务逻辑</li>
  <li><strong>数据库：</strong>数据库用于存储和管理网站或Web应用的数据</li>
</ul>

<p><strong>常见的后端编程语言和框架</strong></p>

<ul>
  <li><strong>Node.js：</strong>使用JavaScript，常与Express框架一起使用</li>
  <li><strong>Python：</strong>通常与Django或Flask框架一起使用</li>
  <li><strong>Ruby：</strong>通常与Ruby on Rails框架一起使用</li>
  <li><strong>PHP：</strong>可以与Laravel、Symfony等框架一起使用</li>
  <li><strong>Java：</strong>通常与Spring框架一起使用</li>
  <li><strong>.NET：</strong>使用C#，是Microsoft的框架</li>
</ul>]]></content><author><name></name></author><category term="Repository" /><summary type="html"><![CDATA[我计划写的全面一些，让这个文档能帮助小白从零开始构建一个自己的网页，它可以是你的博客、产品展示、企业官网等，如果基础内容写完还有功夫的话，我会把一些进阶的办法放进来，无论如何，只要你有兴趣随着文档一步步来，它能帮助你很好的理解网页前端的开发、设计、部署，是不错的入门途径。总之，Flag先立，然后慢慢写吧]]></summary></entry><entry><title type="html">浅草キッド - ビートたけし(浅草小子 - 北野武)</title><link href="KKKKKKKKKK.love/1122" rel="alternate" type="text/html" title="浅草キッド - ビートたけし(浅草小子 - 北野武)" /><published>2023-09-24T00:00:00+00:00</published><updated>2023-09-24T00:00:00+00:00</updated><id>KKKKKKKKKK.love/%E6%B5%85%E8%8D%89%E3%82%AD%E3%83%83%E3%83%89</id><content type="html" xml:base="KKKKKKKKKK.love/1122"><![CDATA[<p> </p>
<div class="audio-container">
  <img src="https://s2.loli.net/2023/09/25/prN6X1sgTcEbUMa.jpg" alt="Album Cover" class="audio-cover" />
  <audio controls="" class="audio-player">
    <source src="https://music.163.com/song/media/outer/url?id=433675.mp3" type="audio/mpeg" />
    你的浏览器似乎不支持音频播放器.
  </audio>
</div>

<h3 id="lyrics">Lyrics：</h3>
<p>お前と会った 仲見世の<br />
<code class="language-plaintext highlighter-rouge">与你相见在仲见世</code><br />
煮込みしかない 鯨屋で<br />
<code class="language-plaintext highlighter-rouge">那间只有煮菜的鲸肉店</code><br />
夢を語ったチュー八イの<br />
<code class="language-plaintext highlighter-rouge">我们谈论梦想</code><br />
泡にはじけた 約束は<br />
<code class="language-plaintext highlighter-rouge">汽酒泡沫里消失的约定</code><br />
灯の消えた 浅草の<br />
<code class="language-plaintext highlighter-rouge">在灯火暗去的浅草</code><br />
コ夕ツ１つの アパートで<br />
<code class="language-plaintext highlighter-rouge">只有一个被炉的公寓</code></p>

<p>同じ背広を初めて買って<br />
<code class="language-plaintext highlighter-rouge">第一次买了同样的西装</code><br />
同じ形の 蝶タイ作り<br />
<code class="language-plaintext highlighter-rouge">做了同样的蝴蝶结领带</code><br />
同じ靴まで 買う金はなく<br />
<code class="language-plaintext highlighter-rouge">却没钱买同样的鞋</code><br />
いつも笑いのネ夕にした<br />
<code class="language-plaintext highlighter-rouge">这一直被我们当做笑料</code><br />
いつか売れると信じてた<br />
<code class="language-plaintext highlighter-rouge">什么时候走红 我们期待着</code><br />
客が2人の 演芸場で<br />
<code class="language-plaintext highlighter-rouge">在只有两个观众的剧场里</code></p>

<p>夢を托した100円を<br />
<code class="language-plaintext highlighter-rouge">把托付着梦想的一百元硬币</code><br />
投げて真面目に拝んでる<br />
<code class="language-plaintext highlighter-rouge">投出去，一本正经地祈祷</code><br />
顔に浮かんだ幼児の<br />
<code class="language-plaintext highlighter-rouge">你脸上浮现孩童般的纯真</code><br />
無垢な心に またほれて<br />
<code class="language-plaintext highlighter-rouge">我再次被你吸引</code></p>

<p>１人訪ねたアパートで<br />
<code class="language-plaintext highlighter-rouge">独自去探访你的公寓</code><br />
グラス傾け懐かしむ<br />
<code class="language-plaintext highlighter-rouge">相碰的酒杯间</code><br />
そんな時代もあったねと<br />
<code class="language-plaintext highlighter-rouge">怀念从前我们也有那样的时代啊</code><br />
笑う背中が揺れている<br />
<code class="language-plaintext highlighter-rouge">你抖着肩膀笑起来</code><br />
夢は棄てたと 言わないで<br />
<code class="language-plaintext highlighter-rouge">不要说 我们已抛弃梦想</code><br />
他にあてなき ２人なのに<br />
<code class="language-plaintext highlighter-rouge">我们明明是 没有其他依靠的两个人</code><br />
夢は棄てたと 言わないで<br />
<code class="language-plaintext highlighter-rouge">不要说 我们已抛弃梦想</code><br />
他に道無き ２人なのに<br />
<code class="language-plaintext highlighter-rouge">我们明明是 没有其他路可以选的两个人</code></p>]]></content><author><name></name></author><category term="post" /><category term="Music" /><summary type="html"><![CDATA[  你的浏览器似乎不支持音频播放器.]]></summary></entry><entry><title type="html">AI绘画提示词集</title><link href="KKKKKKKKKK.love/1989" rel="alternate" type="text/html" title="AI绘画提示词集" /><published>2023-09-07T00:00:00+00:00</published><updated>2023-09-07T00:00:00+00:00</updated><id>KKKKKKKKKK.love/AI%E7%BB%98%E7%94%BB%E6%8F%90%E7%A4%BA%E8%AF%8D%E9%9B%86</id><content type="html" xml:base="KKKKKKKKKK.love/1989"><![CDATA[<p>这是一个AI绘画的提示词词库，其中包含个人整理的有代表性的风格和艺术家名词，以及用它们生成的作品</p>

<p>比起常见的提示词集，我对每个词汇都做了注释、简述了各个时期的艺术风格及其背景，所以即使你并没有在使用AI生成作品，这份资料也能帮助你了解各类艺术风格、建立艺术审美</p>

<p>因为图片较多，为了保证访问速度，我将它放在了飞书文档里：</p>

<p><a href="https://guemustudio.feishu.cn/wiki/space/7252388265402564609?ccm_open_type=lark_wiki_spaceLink" target="_blank">AI绘画提示词集</a><span style="font-style: italic; font-size: 0.9em; color: gray;">（建议用电脑浏览器打开）</span></p>]]></content><author><name></name></author><category term="Repository" /><category term="Url" /><summary type="html"><![CDATA[这是一个AI绘画的提示词词库，其中包含个人整理的有代表性的风格和艺术家名词，以及用它们生成的作品]]></summary></entry><entry><title type="html">关于这里</title><link href="KKKKKKKKKK.love/About" rel="alternate" type="text/html" title="关于这里" /><published>2023-09-06T00:00:00+00:00</published><updated>2023-09-06T00:00:00+00:00</updated><id>KKKKKKKKKK.love/About</id><content type="html" xml:base="KKKKKKKKKK.love/About"><![CDATA[<p>由于各种审查、限制机制与个人价值观不符，于是开了”10K.love”这个空间，它类似朋友圈，可能偶尔只是想在某个时刻留下某句话，<strong>不想定义，自由为上</strong></p>

<p>为了保证不被ban，某些内容我可能会用英文来写，不过放心，网页设置了英文属性，你只需要打开浏览器的翻译功能就能解决语言问题</p>

<p>Repositories”分类是一些个人整理的资料库，有技术文档、方案什么的，因为用途不同，可能托管在不同的平台，内有说明，按需自取</p>

<p>空间设计秉承极简主义，但你应该知道我的风格，肯定不会是看起来那么简单…吧🙃</p>

<p><strong>邮箱</strong>： <br />
<a href="mailto:KK@KKKKKKKKKK.love">KK@KKKKKKKKKK.love</a></p>]]></content><author><name></name></author><summary type="html"><![CDATA[由于各种审查、限制机制与个人价值观不符，于是开了”10K.love”这个空间，它类似朋友圈，可能偶尔只是想在某个时刻留下某句话，不想定义，自由为上]]></summary></entry><entry><title type="html">更新日志</title><link href="KKKKKKKKKK.love/Log" rel="alternate" type="text/html" title="更新日志" /><published>2023-09-06T00:00:00+00:00</published><updated>2023-09-06T00:00:00+00:00</updated><id>KKKKKKKKKK.love/log</id><content type="html" xml:base="KKKKKKKKKK.love/Log"><![CDATA[<h3 id="2023-09-07">2023-09-07</h3>
<ol>
  <li>注册kkkkkkkkkk.love</li>
  <li>部署到github pages</li>
  <li>cloudflare解析</li>
  <li>修改测试</li>
</ol>

<h3 id="2023-09-06">2023-09-06</h3>
<ol>
  <li>使用Jekyll建立博客</li>
  <li>修改测试”no-style-please”主题</li>
</ol>]]></content><author><name></name></author><summary type="html"><![CDATA[2023-09-07 注册kkkkkkkkkk.love 部署到github pages cloudflare解析 修改测试]]></summary></entry><entry><title type="html">Yup, that’s pretty damn minimalistic alright</title><link href="KKKKKKKKKK.love/1121" rel="alternate" type="text/html" title="Yup, that’s pretty damn minimalistic alright" /><published>2023-09-06T00:00:00+00:00</published><updated>2023-09-06T00:00:00+00:00</updated><id>KKKKKKKKKK.love/Yup,%20that&apos;s%20pretty%20damn%20minimalistic%20alright</id><content type="html" xml:base="KKKKKKKKKK.love/1121"><![CDATA[<p>Hey there, Just to give you a heads-up, this is a demo. Since the domain and server are overseas, there might be a bit of lag – hope you understand. You know, back in the mainland, there’s all that content checking and registration, which just doesn’t sit right with my personal values. So, I’ll probably look into other ways to speed things up down the line.</p>

<p>By the way, I had this idea to make the links green at first. But, you know, keeping things sleek and minimalistic, I decided to skip that. Feels just about right now, doesn’t it?</p>

<p>Oh, and if English isn’t your jam, just pop on your browser’s translation<em>（浏览器翻译功能）</em>. It should do the trick..</p>

<h1 id="欢迎来到我的博客">欢迎来到我的博客！</h1>

<p>这是一个使用懒加载的图像示例。这个图像来自于 <a href="https://placeholder.com">placeholder.com</a>，一个提供占位符图像的服务。</p>

<p><img src="https://via.placeholder.com/300" alt="Placeholder Image" /></p>

<p>这个图像是300x300像素的，但你可以通过改变 URL 中的数字来获取不同大小的图像。例如，要获得一个600x400像素的图像，你可以使用以下链接：</p>

<p><img src="https://via.placeholder.com/600x400" alt="Another Placeholder Image" /></p>

<p>感谢你的阅读！记得检查图像是否正确懒加载了。</p>

<h1 id="详细的懒加载图像示例">详细的懒加载图像示例</h1>

<p>欢迎阅读这篇文章！在这篇文章中，我们将展示多个段落和图像，以便你可以测试懒加载的效果。</p>

<p><img src="https://via.placeholder.com/300x200" alt="Image 1" /></p>

<h2 id="第一部分懒加载">第一部分：懒加载</h2>

<p>懒加载是一种优化网页性能的常用技术。通过懒加载，你可以延迟非可视区域的内容加载，从而加快页面的初始加载速度。当用户滚动到内容可见时，内容将自动加载。</p>

<p><img src="https://via.placeholder.com/300x200" alt="Image 2" /></p>

<p>这种技术特别适合于包含大量图像或其他媒体资源的长网页。通过仅加载用户实际能看到的内容，你可以显著减少页面加载所需的带宽和计算资源。</p>

<h2 id="第二部分实施懒加载">第二部分：实施懒加载</h2>

<p>实施懒加载通常涉及 JavaScript 和一些特殊的 HTML 标记。例如，你可以使用 <code class="language-plaintext highlighter-rouge">lazysizes</code> 库来自动处理懒加载，而无需编写大量的自定义代码。</p>

<p><img src="https://via.placeholder.com/300x200" alt="Image 3" /></p>

<p>要使用 <code class="language-plaintext highlighter-rouge">lazysizes</code>，你需要修改图像标签的 <code class="language-plaintext highlighter-rouge">src</code> 属性，改为 <code class="language-plaintext highlighter-rouge">data-src</code>。同时，你还需要添加一个 <code class="language-plaintext highlighter-rouge">class</code> 属性，值为 <code class="language-plaintext highlighter-rouge">lazyload</code>。</p>

<p><code class="language-plaintext highlighter-rouge">html
&lt;img data-src="path_to_your_image" alt="image description" class="lazyload"&gt;</code></p>

<h1 id="超长的-markdown-示例">超长的 Markdown 示例</h1>

<p>欢迎来到这个超长的 Markdown 示例！在这里，你可以测试懒加载的效果。</p>

<p><img src="https://via.placeholder.com/350x150" alt="Image 1" /></p>

<h2 id="段落-1">段落 1</h2>

<p>这是第一个段落。在这个段落中，我们主要讨论懒加载的重要性。懒加载是一种优化技术，它可以提高网站的性能和用户体验。</p>

<p><img src="https://via.placeholder.com/350x150" alt="Image 2" /></p>

<h2 id="段落-2">段落 2</h2>

<p>这是第二个段落。在这个段落中，我们将详细介绍如何实施懒加载。实施懒加载通常需要 JavaScript 和一些特殊的 HTML 标记。</p>

<p><img src="https://via.placeholder.com/350x150" alt="Image 3" /></p>

<h2 id="段落-3">段落 3</h2>

<p>这是第三个段落。在这个段落中，我们将探讨懒加载的优点和缺点。懒加载的主要优点是它可以减少初次加载页面时需要加载的资源数量。</p>

<p><img src="https://ahrefs.com/blog/wp-content/uploads/2020/12/unnamed___.png" alt="Image 4" /></p>

<h2 id="段落-4">段落 4</h2>

<p>这是第四个段落。在这里，我们将讨论懒加载与 SEO 的关系。正确实施的懒加载应该是搜索引擎友好的，因为搜索引擎可以解析和索引懒加载的内容。</p>

<p><img src="https://ahrefs.com/blog/wp-content/uploads/2020/12/1-comic-password-strength.png" alt="Image 5" /></p>

<h2 id="段落-5">段落 5</h2>

<p>这是第五个段落。在这个段落中，我们将回顾我们关于懒加载的所有讨论，并总结主要观点。我们希望这个示例对你有所帮助。</p>

<p><img src="https://ahrefs.com/blog/wp-content/uploads/2020/12/14-keyword-distribution-embed.png" alt="Image 6" /></p>

<h2 id="段落-6">段落 6</h2>

<p>这是第六个段落。我们希望你在测试懒加载时一切顺利。如果你有任何问题或疑虑，请随时提出。</p>

<p><img src="https://via.placeholder.com/350x150" alt="Image 7" /></p>

<h2 id="结尾">结尾</h2>

<p>谢谢你阅读这个超长的 Markdown 示例！我们希望这个示例可以帮助你测试和理解懒加载。</p>

<p><img src="https://via.placeholder.com/350x150" alt="Image 8" /></p>]]></content><author><name></name></author><category term="post" /><summary type="html"><![CDATA[Hey there, Just to give you a heads-up, this is a demo. Since the domain and server are overseas, there might be a bit of lag – hope you understand. You know, back in the mainland, there’s all that content checking and registration, which just doesn’t sit right with my personal values. So, I’ll probably look into other ways to speed things up down the line.]]></summary></entry></feed>